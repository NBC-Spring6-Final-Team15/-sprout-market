plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.hidetake.swagger.generator' version '2.18.2'
    id 'com.epages.restdocs-api-spec' version '0.19.4'
    id 'jacoco'
}

group = 'com.sprarta'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 줄 % 기준으로 커버리지 설정
            limit {
                counter = 'LINE' // 커버리지 기준을 줄(Line)로 설정
                value = 'COVEREDRATIO' // 커버리지가 충족되어야 할 비율로 설정
                minimum = 0.3 // 최소 기준 30% 설정
            }
        }
    }
}


test {
    finalizedBy jacocoTestReport  // 테스트 후 커버리지 리포트 생성
}

swaggerSources {
    api {
        inputFile = file("${projectDir}/build/resources/main/static/docs/open-api-3.0.1.json")  // OpenAPI 스펙 파일 경로
        code {
            language = 'html'  // HTML 파일 생성
            outputDir = layout.buildDirectory.dir("generated/swagger-ui").get().asFile  // 경로 변환
        }
    }
}

openapi3 {
    server = "http://localhost:8080"
    title = "새싹 마켓 API"
    description = "Spring REST Docs with SwaggerUI."
    version = "0.0.1"
    outputFileNamePrefix = 'open-api-3.0.1'
    format = 'json'

    // /static/docs/open-api-3.0.1.json 생성 → jar 파일만 배포할 예정이기에 build 에 출력
    outputDirectory = 'build/resources/main/static/docs'
}

tasks.named('bootJar') {
    dependsOn(':openapi3')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // jwt
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Spring Security
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-messaging:6.1.3'

    // 웹 소켓
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //공간 데이터
    implementation 'org.locationtech.jts:jts-core:1.19.0'
    implementation 'org.hibernate:hibernate-spatial:6.6.1.Final'
    implementation 'de.grundid.opendatalab:geojson-jackson:1.14'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //embedded-redis
    implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

    //API 문서 자동화 관련
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    //Spring Rest Docs 사양의 문서를 OpenAPI3 사양으로 바꿔주는 의존성
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'
    //RestAssured : 통합테스트 관련 의존성
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    // Swagger Generator (OpenAPI 스펙 기반 HTML 생성)
    implementation 'io.swagger:swagger-generator:2.4.43'
    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // QueryDSL(SpringBoot3.0 부터는 jakarta 사용해야함)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:2.1.1"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"

    // 헬스체크, 캐시 확인용
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // 카카오 로그인
    implementation 'com.google.code.gson:gson:2.8.9'

    // RabbitMQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // 이미지 압축 라이브러리
    implementation 'net.coobird:thumbnailator:0.4.14'

    // redisson
    implementation 'org.redisson:redisson:3.19.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

// QueryDSL
def generatedDir = "$buildDir/generated/source/apt/main"

sourceSets {
    main {
        java {
            srcDir generatedDir
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generatedDir)
}
